#include <iostream>
#include <string>
#include <vector>
#include <cctype>
using namespace std;

bool isVowel(char c) {
    c = tolower(c);
    return c == 'a' || c == 'i' || c == 'u' || c == 'e' || c == 'o';
}

string removeVowels(const string& word) {
    string result = "";
    for (char c : word) {
        if (!isVowel(c)) result += c;
    }
    return result;
}

string encrypt(const string& word) {
    if (word.empty()) return "";

    char firstChar = word[0];
    int asciiCode = static_cast<int>(firstChar);
    string noVowels = removeVowels(word);
    string reversed = string(noVowels.rbegin(), noVowels.rend());

    int mid = reversed.length() / 2;
    string encrypted = reversed.substr(0, mid) + to_string(asciiCode) + reversed.substr(mid);
    return encrypted;
}

void insertVowelsRecursively(const string& pattern, string current, int index, const string& vowels, vector<string>& results) {
    if (index == pattern.length()) {
        results.push_back(current);
        return;
    }

    for (int v = 0; v < vowels.length(); v++) {
        insertVowelsRecursively(pattern, current + pattern[index] + vowels[v], index + 1, vowels, results);
    }
}

vector<string> generatePossibilities(const string& pattern, char firstChar) {
    vector<string> results;
    string vowels = "aeiou";

    vector<string> body;
    insertVowelsRecursively(pattern, "", 0, vowels, body);

    for (const string& b : body) {
        results.push_back(firstChar + b);
    }

    return results;
}

void decrypt(const string& encrypted) {
   
    int pos = 0;
    while (pos < encrypted.length() && !isdigit(encrypted[pos])) pos++;

    int endPos = pos;
    while (endPos < encrypted.length() && isdigit(encrypted[endPos])) endPos++;

    if (pos == encrypted.length() || endPos == pos) {
        cout << "Format sandi tidak valid.\n";
        return;
    }

    string asciiCode = encrypted.substr(pos, endPos - pos);
    char firstChar = static_cast<char>(stoi(asciiCode));

    string compressed = encrypted.substr(0, pos) + encrypted.substr(endPos);
    string reversed = string(compressed.rbegin(), compressed.rend());

    cout << "\nHuruf pertama asli: " << firstChar << endl;
    cout << "Pola konsonan setelah dibalik: " << reversed << endl;

    vector<string> guesses = generatePossibilities(reversed, firstChar);

    cout << "\nKemungkinan kata asli:\n";
    for (const string& guess : guesses) {
        cout << "- " << guess << endl;
    }
}

int main() {
    int choice;
    cout << "=== Mesin Kata Sandi Detektif Timothy ===\n";
    cout << "1. Enkripsi kata asli ke kata sandi\n";
    cout << "2. Dekripsi kata sandi ke kemungkinan kata asli\n";
    cout << "Pilih mode (1/2): ";
    cin >> choice;
    cin.ignore();

    if (choice == 1) {
        string word;
        cout << "Masukkan kata asli: ";
        getline(cin, word);
        string result = encrypt(word);
        cout << "Kata sandi: " << result << endl;
    } else if (choice == 2) {
        string encrypted;
        cout << "Masukkan kata sandi: ";
        getline(cin, encrypted);
        decrypt(encrypted);
    } else {
        cout << "Pilihan tidak valid.\n";
    }

    return 0;
}
